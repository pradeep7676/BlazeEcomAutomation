<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="15" time="139.903" timestamp="2024-07-27T11:10:41.612795" hostname="DESKTOP-KS461IL"><testcase classname="tests.test_signup.TestSignup" name="test_signup_new_user" time="8.255"><failure message="NameError: name 'handle_alert' is not defined">self = &lt;test_signup.TestSignup object at 0x00000212CA922FD0&gt;
driver = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="56265be28b658a9538fcbf1e4c3fb839")&gt;

    def test_signup_new_user(self, driver):
        home_page = HomePage(driver)
        home_page.go_to_signup()
        signup_page = SignupPage(driver)
        signup_page.signup(USER_DATA["valid"]["username"], USER_DATA["valid"]["password"])
        time.sleep(2)
&gt;       alert_text = handle_alert(driver, action='accept')
E       NameError: name 'handle_alert' is not defined

tests\test_signup.py:28: NameError</failure></testcase><testcase classname="tests.test_signup.TestSignup" name="test_signup_negative" time="0.007"><failure message="selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Sign up successful.&#10;Message: unexpected alert open: {Alert text : Sign up successful.}&#10;  (Session info: chrome=127.0.6533.73)&#10;Stacktrace:&#10;&#09;GetHandleVerifier [0x00007FF63B889632+30946]&#10;&#09;(No symbol) [0x00007FF63B83E3C9]&#10;&#09;(No symbol) [0x00007FF63B736FDA]&#10;&#09;(No symbol) [0x00007FF63B7CB7CC]&#10;&#09;(No symbol) [0x00007FF63B7AC813]&#10;&#09;(No symbol) [0x00007FF63B77A6E5]&#10;&#09;(No symbol) [0x00007FF63B77B021]&#10;&#09;GetHandleVerifier [0x00007FF63B9BF83D+1301229]&#10;&#09;GetHandleVerifier [0x00007FF63B9CBDB7+1351783]&#10;&#09;GetHandleVerifier [0x00007FF63B9C2A03+1313971]&#10;&#09;GetHandleVerifier [0x00007FF63B8BDD06+245686]&#10;&#09;(No symbol) [0x00007FF63B84758F]&#10;&#09;(No symbol) [0x00007FF63B843804]&#10;&#09;(No symbol) [0x00007FF63B843992]&#10;&#09;(No symbol) [0x00007FF63B83A3EF]&#10;&#09;BaseThreadInitThunk [0x00007FF9EB16257D+29]&#10;&#09;RtlUserThreadStart [0x00007FF9EC44AF28+40]">self = &lt;test_signup.TestSignup object at 0x00000212CC6F7A90&gt;
driver = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="56265be28b658a9538fcbf1e4c3fb839")&gt;

    def test_signup_negative(self, driver):
            home_page = HomePage(driver)
&gt;           home_page.go_to_signup()

tests\test_signup.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
pages\home_page.py:21: in go_to_signup
    self.click(*self.SIGNUP_LINK)
pages\base_page.py:14: in click
    self.find_element(*locator).click()
pages\base_page.py:11: in find_element
    return WebDriverWait(self.driver, 10).until(EC.visibility_of_element_located(locator))
C:\Users\hp\AppData\Local\Programs\Python\Python311\Lib\site-packages\selenium\webdriver\support\wait.py:86: in until
    value = method(self._driver)
C:\Users\hp\AppData\Local\Programs\Python\Python311\Lib\site-packages\selenium\webdriver\support\expected_conditions.py:139: in _predicate
    return _element_if_visible(driver.find_element(*locator))
C:\Users\hp\AppData\Local\Programs\Python\Python311\Lib\site-packages\selenium\webdriver\remote\webdriver.py:831: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
C:\Users\hp\AppData\Local\Programs\Python\Python311\Lib\site-packages\selenium\webdriver\remote\webdriver.py:440: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000212C97E4CD0&gt;
response = {'status': 500, 'value': '{"value":{"data":{"text":"Sign up successful."},"error":"unexpected alert open","message":"u...07FF63B83A3EF]\\n\\tBaseThreadInitThunk [0x00007FF9EB16257D+29]\\n\\tRtlUserThreadStart [0x00007FF9EC44AF28+40]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif (
            status in ErrorCode.INVALID_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER
        ):
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
&gt;           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
E           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: Sign up successful.
E           Message: unexpected alert open: {Alert text : Sign up successful.}
E             (Session info: chrome=127.0.6533.73)
E           Stacktrace:
E           	GetHandleVerifier [0x00007FF63B889632+30946]
E           	(No symbol) [0x00007FF63B83E3C9]
E           	(No symbol) [0x00007FF63B736FDA]
E           	(No symbol) [0x00007FF63B7CB7CC]
E           	(No symbol) [0x00007FF63B7AC813]
E           	(No symbol) [0x00007FF63B77A6E5]
E           	(No symbol) [0x00007FF63B77B021]
E           	GetHandleVerifier [0x00007FF63B9BF83D+1301229]
E           	GetHandleVerifier [0x00007FF63B9CBDB7+1351783]
E           	GetHandleVerifier [0x00007FF63B9C2A03+1313971]
E           	GetHandleVerifier [0x00007FF63B8BDD06+245686]
E           	(No symbol) [0x00007FF63B84758F]
E           	(No symbol) [0x00007FF63B843804]
E           	(No symbol) [0x00007FF63B843992]
E           	(No symbol) [0x00007FF63B83A3EF]
E           	BaseThreadInitThunk [0x00007FF9EB16257D+29]
E           	RtlUserThreadStart [0x00007FF9EC44AF28+40]

C:\Users\hp\AppData\Local\Programs\Python\Python311\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:244: UnexpectedAlertPresentException</failure></testcase><testcase classname="tests.test_signup.TestSignup" name="test_signup_e" time="4.412"><failure message="NameError: name 'handle_alert' is not defined">self = &lt;test_signup.TestSignup object at 0x00000212CCF2AC50&gt;
driver = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="56265be28b658a9538fcbf1e4c3fb839")&gt;

    def test_signup_e(self, driver):
            home_page = HomePage(driver)
            home_page.go_to_signup()
            signup_page = SignupPage(driver)
            signup_page.signup(USER_DATA["valid"]["username"], USER_DATA["valid"]["password"])
            time.sleep(1)
&gt;           alert_text = handle_alert(driver, action='accept')
E           NameError: name 'handle_alert' is not defined

tests\test_signup.py:51: NameError</failure></testcase><testcase classname="tests.test_login.TestLogin" name="test_login_positive" time="6.880" /><testcase classname="tests.test_login.TestLogin" name="test_login_with_wrong_username_password" time="2.270" /><testcase classname="tests.test_login.TestLogin" name="test_login_with_wrong_username" time="4.735" /><testcase classname="tests.test_login.TestLogin" name="test_login_with_wrong_password" time="7.522" /><testcase classname="tests.test_login.TestLogin" name="test_login_with_empty_fields" time="4.013" /><testcase classname="tests.test_cart.TestCart" name="test_add_product_to_cart" time="7.493" /><testcase classname="tests.test_cart.TestCart" name="test_verifying_item_incart" time="4.398" /><testcase classname="tests.test_checkout.TestCheckout" name="test_checkout_positive" time="12.636" /><testcase classname="tests.test_checkout.TestCheckout" name="test_checkout_empty_field" time="8.465" /><testcase classname="tests.test_checkout.TestCheckout" name="test_checkout_with_name_and_card" time="7.370" /><testcase classname="tests.test_checkout.TestCheckout" name="test_checkout_with_empty_cart" time="34.618"><failure message="AssertionError: No error alert found&#10;assert False">self = &lt;test_checkout.TestCheckout object at 0x00000212CCF5BBD0&gt;
driver = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="835dd9e404ba5ccd8b4fba8e05588088")&gt;

    def test_checkout_with_empty_cart(self, driver):
        home_page = HomePage(driver)
        home_page.go_to_cart()
        cart_page = CartPage(driver)
        cart_page.place_order()
        checkout_page = CheckoutPage(driver)
        checkout_page.fill_form_and_purchase(USER_DETAILS['name'], USER_DETAILS['country'], USER_DETAILS['city'],
                                             USER_DETAILS['card'], USER_DETAILS['month'],USER_DETAILS['year'])
    
        # Add verification for successful checkout
        try:
&gt;           alert_text = Utility.handle_alert(driver, action='accept')

tests\test_checkout.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
utils\utility.py:14: in handle_alert
    alert = WebDriverWait(driver, timeout).until(EC.alert_is_present())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.support.wait.WebDriverWait (session="835dd9e404ba5ccd8b4fba8e05588088")&gt;
method = &lt;function alert_is_present.&lt;locals&gt;._predicate at 0x00000212CCFCF7E0&gt;, message = ''

    def until(self, method, message: str = ""):
        """Calls the method provided with the driver as an argument until the \
        return value does not evaluate to ``False``.
    
        :param method: callable(WebDriver)
        :param message: optional message for :exc:`TimeoutException`
        :returns: the result of the last call to `method`
        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs
        """
        screen = None
        stacktrace = None
    
        end_time = time.monotonic() + self._timeout
        while True:
            try:
                value = method(self._driver)
                if value:
                    return value
            except self._ignored_exceptions as exc:
                screen = getattr(exc, "screen", None)
                stacktrace = getattr(exc, "stacktrace", None)
            time.sleep(self._poll)
            if time.monotonic() &gt; end_time:
                break
&gt;       raise TimeoutException(message, screen, stacktrace)
E       selenium.common.exceptions.TimeoutException: Message:

C:\Users\hp\AppData\Local\Programs\Python\Python311\Lib\site-packages\selenium\webdriver\support\wait.py:95: TimeoutException

During handling of the above exception, another exception occurred:

self = &lt;test_checkout.TestCheckout object at 0x00000212CCF5BBD0&gt;
driver = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="835dd9e404ba5ccd8b4fba8e05588088")&gt;

    def test_checkout_with_empty_cart(self, driver):
        home_page = HomePage(driver)
        home_page.go_to_cart()
        cart_page = CartPage(driver)
        cart_page.place_order()
        checkout_page = CheckoutPage(driver)
        checkout_page.fill_form_and_purchase(USER_DETAILS['name'], USER_DETAILS['country'], USER_DETAILS['city'],
                                             USER_DETAILS['card'], USER_DETAILS['month'],USER_DETAILS['year'])
    
        # Add verification for successful checkout
        try:
            alert_text = Utility.handle_alert(driver, action='accept')
            assert "Error" in alert_text, "Expected error alert not found"
        except TimeoutException:
            print("Expected error alert not found")
&gt;           assert False, "No error alert found"
E           AssertionError: No error alert found
E           assert False

tests\test_checkout.py:79: AssertionError</failure></testcase><testcase classname="tests.test_logout.TestLogout" name="test_logout" time="13.670" /></testsuite></testsuites>